{"version":3,"sources":["../../src/Emoji.tsx","../../src/lib/emojiEvent.js","../../src/EmojiPicker.tsx","../../src/EmojiCounter.tsx","../../src/lib/useEmojis.ts","../../src/EmojiBlock.tsx","CustomReactions.js","CustomReactionsV2.js","DefaultReactions.js","App.js","index.js"],"names":["Emoji","emoji","onClick","React","className","role","label","document","dispatchEvent","event","Event","bubbles","EmojiPicker","selectedEmojis","availableEmojis","pickerIcon","useState","open","isOpen","toggleOpen","i","emojis","filter","e","map","includes","key","Fragment","length","EmojiCounter","initialValue","useEmojis","initialEmojis","useReducer","reducer","dispatch","type","state","action","emojiFromState","em","counter","rea","selected","onUpdate","increment","useEffect","mappedReactions","sort","a","b","DEFAULT_EMOJI_OPTIONS","CustomReactions","id","viewBox","xmlns","fill","d","cx","cy","r","stroke","stroke-miterlimit","stroke-width","x1","x2","y1","y2","stroke-linecap","stroke-linejoin","style","margin","width","DefaultReactions","console","log","App","aria-label","href","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f9ec1be9.chunk.js","sourcesContent":["import React from 'react';\r\nimport emojiEvent from './lib/emojiEvent';\r\nimport { EmojiObject } from './types';\r\n\r\ntype Props = {\r\n  emoji: EmojiObject;\r\n  onClick?: Function;\r\n};\r\n\r\nexport default function Emoji({ emoji, onClick }: Props) {\r\n  return (\r\n    <span\r\n      className='emoji'\r\n      role='img'\r\n      aria-label={emoji.label ? emoji.label : 'Emoji'}\r\n      onClick={() => {\r\n        onClick && onClick();\r\n        document.dispatchEvent(emojiEvent(emoji));\r\n      }}\r\n    >\r\n      {emoji.emoji}\r\n    </span>\r\n  );\r\n}\r\n","const emojiEvent = (emoji) => {\r\n  // eslint-disable-next-line no-undef\r\n  const event = new Event('emoji', { bubbles: true });\r\n  event.emoji = emoji;\r\n  return event;\r\n};\r\n\r\nexport default emojiEvent;\r\n","import React, { useState, Fragment } from 'react';\r\nimport Emoji from './Emoji';\r\nimport { EmojiObject } from './types';\r\n\r\ntype EmojiPickerProps = {\r\n  selectedEmojis: Array<EmojiObject>;\r\n  availableEmojis: Array<EmojiObject>;\r\n  pickerIcon?: string;\r\n  onClick: Function;\r\n};\r\n\r\nexport default function EmojiPicker({\r\n  selectedEmojis,\r\n  availableEmojis,\r\n  pickerIcon = '+',\r\n  onClick,\r\n}: EmojiPickerProps) {\r\n  const [open, isOpen] = useState(false);\r\n  const toggleOpen = () => isOpen(!open);\r\n\r\n  let i = 0;\r\n  const emojis = availableEmojis\r\n    .filter((e) => !selectedEmojis?.map((e) => e.emoji).includes(e.emoji))\r\n    .map((emoji) => {\r\n      return (\r\n        <Emoji\r\n          key={++i}\r\n          emoji={emoji}\r\n          onClick={() => {\r\n            onClick(emoji);\r\n            toggleOpen();\r\n          }}\r\n        />\r\n      );\r\n    });\r\n\r\n  function EmojiMenu() {\r\n    return (\r\n      <div\r\n        className={open ? 'emoji-menu-open' : 'emoji-menu-closed'}\r\n        data-testid='emoji-menu'\r\n      >\r\n        {emojis}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {emojis.length > 0 && (\r\n        <span className='emoji-adder' onClick={toggleOpen}>\r\n          <Emoji\r\n            emoji={{\r\n              emoji: pickerIcon,\r\n              label: 'emoji-plus',\r\n            }}\r\n          />\r\n          <EmojiMenu />\r\n        </span>\r\n      )}\r\n    </Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Emoji from './Emoji';\r\nimport { EmojiObject } from './types';\r\n\r\ntype EmojiCounterProps = {\r\n  emoji: EmojiObject;\r\n  initialValue?: number;\r\n  onClick?: Function;\r\n};\r\n\r\nexport default function EmojiCounter({\r\n  emoji,\r\n  initialValue = 0,\r\n  onClick,\r\n}: EmojiCounterProps) {\r\n  return (\r\n    <span className='emoji-container' data-testid='emojiCounter'>\r\n      <Emoji\r\n        emoji={emoji}\r\n        onClick={onClick ? () => onClick(emoji) : undefined}\r\n      />\r\n      <div>\r\n        <span className='emoji-counter'>{initialValue}</span>\r\n      </div>\r\n    </span>\r\n  );\r\n}\r\n","import { useReducer } from 'react';\r\nimport { EmojiObject } from '../types';\r\n\r\nexport default function useEmojis(\r\n  initialEmojis: Array<EmojiObject> = [],\r\n): [Array<EmojiObject>, Function, Function] {\r\n  const [emojis, dispatch] = useReducer(reducer, [...initialEmojis]);\r\n\r\n  const increment: Function = (emoji: EmojiObject) =>\r\n    dispatch({ type: 'i', emoji: emoji });\r\n  const decrement: Function = (emoji: EmojiObject) =>\r\n    dispatch({ type: 'd', emoji: emoji });\r\n\r\n  return [emojis, increment, decrement];\r\n}\r\n\r\nfunction reducer(\r\n  state: Array<EmojiObject>,\r\n  action: {\r\n    emoji: EmojiObject;\r\n    type: 'i' | 'd';\r\n  },\r\n): Array<EmojiObject> {\r\n  const emoji = action.emoji;\r\n  let emojiFromState = state.filter((em) => em.emoji === emoji.emoji)[0];\r\n  if (!emojiFromState) {\r\n    emoji.counter = 0;\r\n    emojiFromState = emoji;\r\n  }\r\n  switch (action.type) {\r\n    case 'i':\r\n      emojiFromState.counter++;\r\n      break;\r\n    case 'd':\r\n      emojiFromState.counter--;\r\n      if (emojiFromState.counter < 0) emojiFromState.counter = 0;\r\n  }\r\n  return [\r\n    ...state.filter((rea) => rea.emoji !== emojiFromState.emoji),\r\n    ...(emojiFromState.counter > 0 ? [emojiFromState] : []),\r\n  ];\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport EmojiPicker from './EmojiPicker';\r\nimport EmojiCounter from './EmojiCounter';\r\nimport useEmojis from './lib/useEmojis';\r\nimport { EmojiObject } from './types';\r\n\r\ntype EmojiBlockProps = {\r\n  emojis: Array<EmojiObject>;\r\n  selected?: Array<EmojiObject>;\r\n  onUpdate?: Function;\r\n};\r\n\r\nexport default function EmojiBlock({\r\n  emojis,\r\n  selected = [],\r\n  onUpdate,\r\n}: EmojiBlockProps) {\r\n  const [state, increment] = useEmojis([...selected]);\r\n\r\n  useEffect(() => {\r\n    if (onUpdate) {\r\n      onUpdate(state);\r\n    }\r\n  }, [state]);\r\n\r\n  let i = 0;\r\n  const mappedReactions = state\r\n    .sort((a, b) => (a.emoji < b.emoji ? 1 : -1))\r\n    .map((emoji) => (\r\n      <EmojiCounter\r\n        key={i++}\r\n        emoji={emoji}\r\n        initialValue={emoji.counter}\r\n        onClick={increment}\r\n      />\r\n    ));\r\n\r\n  return (\r\n    <div className='reaction-block' data-testid='reaction-block'>\r\n      {mappedReactions}\r\n      <EmojiPicker\r\n        selectedEmojis={state}\r\n        onClick={increment}\r\n        availableEmojis={emojis}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { EmojiCounter, EmojiPicker, useEmojis } from 'lepre';\r\n\r\nconst DEFAULT_EMOJI_OPTIONS = [\r\n  { emoji: '🐼', label: 'panda' },\r\n  { emoji: '🐰', label: 'rabbit' },\r\n  { emoji: '🐨', label: 'koala' },\r\n  { emoji: '🐬', label: 'dolphin' },\r\n];\r\n\r\nexport default function CustomReactions() {\r\n  const [emojis, increment] = useEmojis([\r\n    { emoji: '🐼', label: 'panda', counter: 10 },\r\n  ]);\r\n\r\n  let i = 0;\r\n  const selected = emojis\r\n    .sort((a, b) => (a.emoji < b.emoji ? 1 : -1))\r\n    .map((emoji) => (\r\n      <EmojiCounter\r\n        key={i++}\r\n        emoji={emoji}\r\n        initialValue={emoji.counter}\r\n        onClick={increment}\r\n      />\r\n    ));\r\n\r\n  return (\r\n    <div className='comment'>\r\n      <div className='custom-picker'>\r\n        <EmojiPicker\r\n          availableEmojis={DEFAULT_EMOJI_OPTIONS}\r\n          onClick={increment}\r\n          pickerIcon={\r\n            <svg\r\n              id='emoji'\r\n              viewBox='0 0 72 72'\r\n              xmlns='http://www.w3.org/2000/svg'\r\n            >\r\n              <g id='color'>\r\n                <path\r\n                  fill='none'\r\n                  d='M36,13c-12.6823,0-23,10.3177-23,23c0,12.6822,10.3177,23,23,23c12.6822,0,23-10.3178,23-23 C59,23.3177,48.6822,13,36,13z'\r\n                />\r\n              </g>\r\n              <g id='hair' />\r\n              <g id='skin' />\r\n              <g id='skin-shadow' />\r\n              <g id='line'>\r\n                <circle\r\n                  cx='36'\r\n                  cy='36'\r\n                  r='23'\r\n                  fill='none'\r\n                  stroke='#000000'\r\n                  stroke-miterlimit='10'\r\n                  stroke-width='2'\r\n                />\r\n                <line\r\n                  x1='27'\r\n                  x2='45'\r\n                  y1='43'\r\n                  y2='43'\r\n                  fill='none'\r\n                  stroke='#000000'\r\n                  stroke-linecap='round'\r\n                  stroke-linejoin='round'\r\n                  stroke-miterlimit='10'\r\n                  stroke-width='2'\r\n                />\r\n                <path d='M30,31c0,1.6568-1.3448,3-3,3c-1.6553,0-3-1.3433-3-3c0-1.6552,1.3447-3,3-3C28.6552,28,30,29.3448,30,31' />\r\n                <path d='M48,31c0,1.6568-1.3447,3-3,3s-3-1.3433-3-3c0-1.6552,1.3447-3,3-3S48,29.3448,48,31' />\r\n              </g>\r\n            </svg>\r\n          }\r\n          selectedEmojis={emojis}\r\n        />\r\n      </div>\r\n      <p>You can customize the reaction block however you want!</p>\r\n      <div className='custom-selection'>{selected}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { EmojiCounter, useEmojis } from 'lepre';\r\n\r\nconst DEFAULT_EMOJI_OPTIONS = [\r\n  { emoji: '🐼', label: 'panda', counter: 0 },\r\n  { emoji: '🐰', label: 'rabbit', counter: 5 },\r\n  { emoji: '🐨', label: 'koala', counter: 3 },\r\n  { emoji: '🐬', label: 'dolphin', counter: 13 },\r\n];\r\n\r\nexport default function CustomReactions() {\r\n  const [emojis, increment] = useEmojis(DEFAULT_EMOJI_OPTIONS);\r\n\r\n  let i = 0;\r\n  const selected = emojis\r\n    .sort((a, b) => (a.emoji < b.emoji ? 1 : -1))\r\n    .map((emoji) => (\r\n      <EmojiCounter\r\n        key={i++}\r\n        emoji={emoji}\r\n        initialValue={emoji.counter}\r\n        onClick={increment}\r\n      />\r\n    ));\r\n\r\n  return (\r\n    <div className='comment'>\r\n      <p>\r\n        Mix and match the components and create your personalized Reaction\r\n        Block.\r\n      </p>\r\n      <div\r\n        className='custom-selection'\r\n        style={{ margin: 'auto', width: 'fit-content' }}\r\n      >\r\n        {selected}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport EmojiBlock from 'lepre';\r\n\r\nconst DEFAULT_EMOJI_OPTIONS = [\r\n  { emoji: '🐼', label: 'panda' },\r\n  { emoji: '🐰', label: 'rabbit' },\r\n  { emoji: '🐨', label: 'koala' },\r\n  { emoji: '🐬', label: 'dolphin' },\r\n];\r\n\r\nexport default function DefaultReactions() {\r\n  function onUpdateExample(state) {\r\n    console.log('State Updated');\r\n    console.log(state);\r\n  }\r\n\r\n  return (\r\n    <div className='comment'>\r\n      <div>\r\n        <p>This is a sample comment with the default reaction block.</p>\r\n      </div>\r\n      <EmojiBlock\r\n        emojis={DEFAULT_EMOJI_OPTIONS}\r\n        selected={[{ emoji: '🐼', label: 'panda', counter: 3 }]}\r\n        onUpdate={onUpdateExample}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport CustomReactions from './CustomReactions';\r\nimport CustomReactionsV2 from './CustomReactionsV2';\r\nimport DefaultReactions from './DefaultReactions';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>\r\n        <span role='img' aria-label='rabbit'>\r\n          🐰\r\n        </span>\r\n        L.E.P.R.E.\r\n      </h1>\r\n      <h3>Lightweight Emoji Picker for React Enthusiasts</h3>\r\n      <h4>\r\n        <a href='https://github.com/PandaSekh/lepre'>Github</a>\r\n        <a href='https://www.npmjs.com/package/lepre'>npm</a>\r\n      </h4>\r\n\r\n      <div className='content'>\r\n        <DefaultReactions />\r\n      </div>\r\n\r\n      <div className='content'>\r\n        <CustomReactions />\r\n      </div>\r\n      <div className='content'>\r\n        <CustomReactionsV2 />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import './index.css';\r\nimport './emojiBlock.css';\r\nimport './customEmojiBlock.css';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}